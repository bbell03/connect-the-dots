{"ast":null,"code":"var _jsxFileName = \"/workspaces/connect-the-dots/src/App.js\",\n  _s = $RefreshSig$();\n// import logo from './logo.svg';\nimport './App.css';\nimport React, { useState, useEffect, useRef, createRef } from 'react';\nimport { fabric } from 'fabric';\nimport DoublyList from './LL';\n\n// var CANVAS_SIZE = 600; // defined in css\n// var grid = 60; // spacing between circles\n// var CIRCLES_PER_ROW = 6; // rows & columns\n// var linked_list = new DoublyList(); // linked list of selected dots\n// var lockLine = false; // if line should be snapped to a dot\n// var currentCircle; // current circle that was hovered over\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar line; // current line being moved around\nvar isDown; // if the mouse is down (dragging line)\nvar lineExists = false; // At least one line exists\nvar totalLines = 0; // total number of lines connecting dots\nvar activeColor = \"#000\"; // color of active line\n// var allLines = []; // array of all drawn lines\n// var gameOver = false;\n\nfunction makeLine(x_start, x_end, y_start, y_end) {\n  let line = new fabric.Line([x_start, x_end, y_start, y_end], {\n    stroke: 'green'\n  });\n  return line;\n}\n\n// function mouseDown() {\n\n//   if (o.target && o.target.get('type') == \"circle\") {\n\n//       // If line color already exists, it cannot be changed.\n//       if (lineExists && activeColor != o.target.getFill()) {\n//           console.log(\"Color not not match existing.\");\n//           line = null;\n//           return;\n//       } else {\n//           activeColor = o.target.getFill();\n//           // Add first, starting circle to list (line does not exist at this point)\n//           linked_list.add(o.target.id);\n//           o.target.out = true;\n//           console.log(linked_list);\n//       }\n//       let activeCircleCenter = o.target.getCenterPoint();\n\n//       isDown = true;\n\n//       let points = [activeCircleCenter.x, activeCircleCenter.y, activeCircleCenter.x, activeCircleCenter.y];\n\n//       allLines[totalLines] = new fabric.Line(points, {\n//           strokeWidth: 12,\n//           stroke: activeColor,\n//           originX: 'center',\n//           originY: 'center'\n//       });\n\n//       line = allLines[totalLines];\n\n//       canvas.current.add(line);\n\n//   }\n\n// }\n\nfunction App() {\n  _s();\n  // const [canvas, setCanvas] = useState('');\n  let canvas = /*#__PURE__*/React.createRef();\n  useEffect(() => {\n    canvas.current = new fabric.Canvas('c', {\n      height: 800,\n      width: 800,\n      backgroundColor: 'pink'\n    });\n    console.log(canvas.current);\n    // canvas.current = initCanvas();\n    if (canvas) {\n      canvas.current.add(makeLine(50, 10, 200, 150));\n    }\n    for (var i = 0; i < 1; i++) {\n      for (var n = 0; n < 2; n++) {\n        var random_color = 'blue';\n        var circ = new fabric.Circle({\n          id: i * 2 + n,\n          in: false,\n          out: false,\n          left: n * 60,\n          top: i * 60,\n          radius: 15,\n          fill: random_color,\n          strokeWidth: 5,\n          stroke: 'rgba(0,0,0,0)',\n          originX: 'left',\n          originY: 'top',\n          centeredRotation: true,\n          selectable: true\n        });\n        canvas.current.add(circ);\n      }\n    }\n\n    // canvas.current.on('mouse:down', mouseDown());\n\n    // Primarily used for first down\n    canvas.current.on('mouse:down', function (o) {\n      if (o.target.get('type') == \"circle\") {\n        // If line color already exists, it cannot be changed.\n        if (lineExists && activeColor != o.target.getFill()) {\n          console.log(\"Color not not match existing.\");\n          line = null;\n          return;\n        } else {\n          activeColor = o.target.getFill();\n          // Add first, starting circle to list (line does not exist at this point)\n          linked_list.add(o.target.id);\n          o.target.out = true;\n          console.log(linked_list);\n        }\n        let activeCircleCenter = o.target.getCenterPoint();\n        isDown = true;\n        let points = [activeCircleCenter.x, activeCircleCenter.y, activeCircleCenter.x, activeCircleCenter.y];\n        allLines[totalLines] = new fabric.Line(points, {\n          strokeWidth: 12,\n          stroke: activeColor,\n          originX: 'center',\n          originY: 'center'\n        });\n        line = allLines[totalLines];\n        canvas.current.add(line);\n      }\n    });\n  }, []);\n  const initCanvas = () => {\n    new fabric.Canvas('c', {\n      height: 800,\n      width: 800,\n      backgroundColor: 'pink'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Fabric Canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Dots and a Line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"c\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","createRef","fabric","DoublyList","jsxDEV","_jsxDEV","line","isDown","lineExists","totalLines","activeColor","makeLine","x_start","x_end","y_start","y_end","Line","stroke","App","_s","canvas","current","Canvas","height","width","backgroundColor","console","log","add","i","n","random_color","circ","Circle","id","in","out","left","top","radius","fill","strokeWidth","originX","originY","centeredRotation","selectable","on","o","target","get","getFill","linked_list","activeCircleCenter","getCenterPoint","points","x","y","allLines","initCanvas","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/connect-the-dots/src/App.js"],"sourcesContent":["// import logo from './logo.svg';\nimport './App.css';\nimport React, { useState, useEffect, useRef, createRef} from 'react';\nimport {fabric} from 'fabric';\nimport DoublyList from './LL';\n\n// var CANVAS_SIZE = 600; // defined in css\n// var grid = 60; // spacing between circles\n// var CIRCLES_PER_ROW = 6; // rows & columns\n// var linked_list = new DoublyList(); // linked list of selected dots\n// var lockLine = false; // if line should be snapped to a dot\n// var currentCircle; // current circle that was hovered over\n\nvar line; // current line being moved around\nvar isDown; // if the mouse is down (dragging line)\nvar lineExists = false; // At least one line exists\nvar totalLines = 0; // total number of lines connecting dots\nvar activeColor = \"#000\"; // color of active line\n// var allLines = []; // array of all drawn lines\n// var gameOver = false;\n\nfunction makeLine(x_start, x_end, y_start, y_end) {\n  let line = new fabric.Line([x_start, x_end, y_start, y_end], {\n    stroke: 'green'\n  });\n\n  return line\n}\n\n// function mouseDown() {\n\n//   if (o.target && o.target.get('type') == \"circle\") {\n\n//       // If line color already exists, it cannot be changed.\n//       if (lineExists && activeColor != o.target.getFill()) {\n//           console.log(\"Color not not match existing.\");\n//           line = null;\n//           return;\n//       } else {\n//           activeColor = o.target.getFill();\n//           // Add first, starting circle to list (line does not exist at this point)\n//           linked_list.add(o.target.id);\n//           o.target.out = true;\n//           console.log(linked_list);\n//       }\n//       let activeCircleCenter = o.target.getCenterPoint();\n\n//       isDown = true;\n\n//       let points = [activeCircleCenter.x, activeCircleCenter.y, activeCircleCenter.x, activeCircleCenter.y];\n\n//       allLines[totalLines] = new fabric.Line(points, {\n//           strokeWidth: 12,\n//           stroke: activeColor,\n//           originX: 'center',\n//           originY: 'center'\n//       });\n\n//       line = allLines[totalLines];\n\n//       canvas.current.add(line);\n\n//   }\n\n\n// }\n\n\nfunction App() {\n  // const [canvas, setCanvas] = useState('');\n  let canvas = React.createRef();\n\n  useEffect(() => {\n    canvas.current = new fabric.Canvas('c', {\n      height: 800,\n      width: 800,\n      backgroundColor: 'pink'\n    });\n    console.log(canvas.current);\n    // canvas.current = initCanvas();\n    if (canvas) {\n      canvas.current.add(makeLine(50, 10, 200, 150));\n    }\n\n\n    for (var i = 0; i < 1; i++) {\n\n      for (var n = 0; n < 2; n++) {\n          var random_color = 'blue'\n          var circ = new fabric.Circle({\n              id: (i * 2) + n,\n              in: false,\n              out: false,\n              left: n * 60,\n              top: i * 60,\n              radius: 15,\n              fill: random_color,\n              strokeWidth: 5,\n              stroke: 'rgba(0,0,0,0)',\n              originX: 'left',\n              originY: 'top',\n              centeredRotation: true,\n              selectable: true\n          });\n\n          canvas.current.add(circ);\n    }\n\n  }\n\n  // canvas.current.on('mouse:down', mouseDown());\n\n  // Primarily used for first down\n  canvas.current.on('mouse:down', function (o) {\n\n    if (o.target.get('type') == \"circle\") {\n\n        // If line color already exists, it cannot be changed.\n        if (lineExists && activeColor != o.target.getFill()) {\n            console.log(\"Color not not match existing.\");\n            line = null;\n            return;\n        } else {\n            activeColor = o.target.getFill();\n            // Add first, starting circle to list (line does not exist at this point)\n            linked_list.add(o.target.id);\n            o.target.out = true;\n            console.log(linked_list);\n        }\n        let activeCircleCenter = o.target.getCenterPoint();\n\n        isDown = true;\n\n        let points = [activeCircleCenter.x, activeCircleCenter.y, activeCircleCenter.x, activeCircleCenter.y];\n\n        allLines[totalLines] = new fabric.Line(points, {\n            strokeWidth: 12,\n            stroke: activeColor,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        line = allLines[totalLines];\n\n        canvas.current.add(line);\n\n    }\n\n\n  });\n\n  }, []);\n\n\n  const initCanvas = () => {\n    new fabric.Canvas('c', {\n      height: 800,\n      width: 800,\n      backgroundColor: 'pink'\n    })\n  };\n\n  return (\n\n    <div className=\"App\">\n      <h1>Fabric Canvas</h1>\n      <h3>Dots and a Line</h3>\n      <canvas id=\"c\"></canvas>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}