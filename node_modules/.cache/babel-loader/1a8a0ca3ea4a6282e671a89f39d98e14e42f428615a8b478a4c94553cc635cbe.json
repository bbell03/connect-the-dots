{"ast":null,"code":"var _jsxFileName = \"/workspaces/connect-the-dots/src/App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport React, { useState, useEffect, useRef, createRef } from 'react';\nimport { fabric } from 'fabric';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction makeLine(x_start, x_end, y_start, y_end) {\n  let line = new fabric.Line([x_start, x_end, y_start, y_end], {\n    stroke: 'green'\n  });\n  return line;\n}\ncanvas.on('mouse:down', function (o) {\n  if (o.target.get('type') == \"circle\") {\n    // If line color already exists, it cannot be changed.\n    if (lineExists && activeColor != o.target.getFill()) {\n      console.log(\"Color not not match existing.\");\n      line = null;\n      return;\n    } else {\n      activeColor = o.target.getFill();\n      // Add first, starting circle to list (line does not exist at this point)\n      linked_list.add(o.target.id);\n      o.target.out = true;\n      console.log(linked_list);\n    }\n    activeCircleCenter = o.target.getCenterPoint();\n    isDown = true;\n    var points = [activeCircleCenter.x, activeCircleCenter.y, activeCircleCenter.x, activeCircleCenter.y];\n    allLines[totalLines] = new fabric.Line(points, {\n      strokeWidth: 12,\n      stroke: activeColor,\n      originX: 'center',\n      originY: 'center'\n    });\n    line = allLines[totalLines];\n    canvas.add(line);\n  }\n});\nfunction App() {\n  _s();\n  // const [canvas, setCanvas] = useState('');\n  let canvas = /*#__PURE__*/React.createRef();\n  useEffect(() => {\n    canvas.current = new fabric.Canvas('c', {\n      height: 800,\n      width: 800,\n      backgroundColor: 'pink'\n    });\n    console.log(canvas.current);\n    // canvas.current = initCanvas();\n    if (canvas) {\n      canvas.current.add(makeLine(50, 10, 200, 150));\n    }\n    for (var i = 0; i < 1; i++) {\n      for (var n = 0; n < 2; n++) {\n        var random_color = 'blue';\n        var circ = new fabric.Circle({\n          id: i * 2 + n,\n          in: false,\n          out: false,\n          left: n * 60,\n          top: i * 60,\n          radius: 15,\n          fill: random_color,\n          strokeWidth: 5,\n          stroke: 'rgba(0,0,0,0)',\n          originX: 'left',\n          originY: 'top',\n          centeredRotation: true,\n          selectable: true\n        });\n        canvas.current.add(circ);\n      }\n    }\n  }, []);\n  const initCanvas = () => {\n    new fabric.Canvas('c', {\n      height: 800,\n      width: 800,\n      backgroundColor: 'pink'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Fabric Canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Dots and a Line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"c\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","React","useState","useEffect","useRef","createRef","fabric","jsxDEV","_jsxDEV","makeLine","x_start","x_end","y_start","y_end","line","Line","stroke","canvas","on","o","target","get","lineExists","activeColor","getFill","console","log","linked_list","add","id","out","activeCircleCenter","getCenterPoint","isDown","points","x","y","allLines","totalLines","strokeWidth","originX","originY","App","_s","current","Canvas","height","width","backgroundColor","i","n","random_color","circ","Circle","in","left","top","radius","fill","centeredRotation","selectable","initCanvas","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/connect-the-dots/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport React, { useState, useEffect, useRef, createRef} from 'react';\nimport {fabric} from 'fabric';\n\nfunction makeLine(x_start, x_end, y_start, y_end) {\n  let line = new fabric.Line([x_start, x_end, y_start, y_end], {\n    stroke: 'green'\n  });\n\n  return line\n}\n\n\n\ncanvas.on('mouse:down', function (o) {\n\n  if (o.target.get('type') == \"circle\") {\n\n      // If line color already exists, it cannot be changed.\n      if (lineExists && activeColor != o.target.getFill()) {\n          console.log(\"Color not not match existing.\");\n          line = null;\n          return;\n      } else {\n          activeColor = o.target.getFill();\n          // Add first, starting circle to list (line does not exist at this point)\n          linked_list.add(o.target.id);\n          o.target.out = true;\n          console.log(linked_list);\n      }\n      activeCircleCenter = o.target.getCenterPoint();\n\n      isDown = true;\n\n      var points = [activeCircleCenter.x, activeCircleCenter.y, activeCircleCenter.x, activeCircleCenter.y];\n\n      allLines[totalLines] = new fabric.Line(points, {\n          strokeWidth: 12,\n          stroke: activeColor,\n          originX: 'center',\n          originY: 'center'\n      });\n\n      line = allLines[totalLines];\n\n      canvas.add(line);\n\n  }\n\n\n});\n\n\nfunction App() {\n  // const [canvas, setCanvas] = useState('');\n  let canvas = React.createRef();\n\n  useEffect(() => {\n    canvas.current = new fabric.Canvas('c', {\n      height: 800,\n      width: 800,\n      backgroundColor: 'pink'\n    });\n    console.log(canvas.current);\n    // canvas.current = initCanvas();\n    if (canvas) {\n      canvas.current.add(makeLine(50, 10, 200, 150));\n    }\n\n\n    for (var i = 0; i < 1; i++) {\n\n      for (var n = 0; n < 2; n++) {\n          var random_color = 'blue'\n          var circ = new fabric.Circle({\n              id: (i * 2) + n,\n              in: false,\n              out: false,\n              left: n * 60,\n              top: i * 60,\n              radius: 15,\n              fill: random_color,\n              strokeWidth: 5,\n              stroke: 'rgba(0,0,0,0)',\n              originX: 'left',\n              originY: 'top',\n              centeredRotation: true,\n              selectable: true\n          });\n\n          canvas.current.add(circ);\n    }\n\n  }\n\n\n  }, []);\n\n\n\n  const initCanvas = () => {\n    new fabric.Canvas('c', {\n      height: 800,\n      width: 800,\n      backgroundColor: 'pink'\n    })\n  };\n\n  return (\n\n    <div className=\"App\">\n      <h1>Fabric Canvas</h1>\n      <h3>Dots and a Line</h3>\n      <canvas id=\"c\"></canvas>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}